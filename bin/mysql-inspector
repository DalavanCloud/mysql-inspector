#!/usr/bin/env ruby

$LOAD_PATH.unshift File.dirname(__FILE__) + '/../lib'
require 'optparse'
require "mysql-inspector"

options = {
  :versions => [],
  :base_dir => ".",
  :diff => false,
  :grep => false,
  :write => false,
  :clean => false
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options]"

  opts.on("-c", "--current", "Perform the given action(s) with the current version.") do
    options[:versions] << "current"
  end

  opts.on("-t", "--target", "Perform the given action(s) with the target version.") do
    options[:versions] << "target"
  end

  opts.on("-w", "--write DB", "Store a schema for the database") do |db_name|
    options[:write] = db_name
  end

  opts.on("-f", "--force", "Overwrite a previously stored schema") do |ok|
    options[:clean] = true
  end

  opts.on("-d", "--diff", "Output a comparison between the current and target schemas") do |info|
    options[:diff] = true
  end

  opts.on("-g", "--grep foo_id,bar_id", "Find columns and/or indices matching the pattern") do |columns|
    options[:grep] = columns.split(",").collect { |c| c.strip }
  end

  opts.on("-h", "--help", "What you're looking at") do
    puts opts
  end

  puts opts if ARGV.empty?

end.parse!

def how_to_write_version(input)
  "#{File.basename $0} --#{input.version} --write DB_NAME"
end

begin

  options[:versions].collect! do |version|
    MysqlInspector::Dump.new(version, options[:base_dir])
  end

  if options[:clean]
    options[:versions].each { |v| v.clean! }
  end

  if options[:write]
    raise MysqlInspector::Precondition, "Please specify which version to write" if options[:versions].size == 0
    raise MysqlInspector::Precondition, "I can only write one version at a time" unless options[:versions].size == 1
    version = options[:versions].first
    version.dump!(options[:write])
  end

  if options[:grep]
    options[:versions].each do |v|
      grep = MysqlInspector::Grep.new(v)
      grep.find(STDOUT, *options[:grep])
    end
  end

  if options[:diff]
    inputs = ["current", "target"].collect { |version| MysqlInspector::Dump.new(version, options[:base_dir]) }
    inputs.each do |input|
      raise MysqlInspector::Precondition, "No #{input.version} version exists. Write one with `#{how_to_write_version(input)}`" unless input.exists?
    end
    comparison = MysqlInspector::Comparison.new(*inputs)
    comparison.compare(STDOUT)
  end

rescue MysqlInspector::Precondition => e
  puts "#{e.message}."
end
